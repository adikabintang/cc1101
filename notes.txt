// uint8_t registerSetting[47] = {
//     0x09, //buat CCA, 9 //0x07,  // IOCFG2        GDO2 Output Pin Configuration
//     0x2E,  // IOCFG1        GDO1 Output Pin Configuration
//     0x06,//0x07,//0x80,  // IOCFG0        GDO0 Output Pin Configuration
//     0x07,  // FIFOTHR       RX FIFO and TX FIFO Thresholds
//     0x57,  // SYNC1         Sync Word, High Byte
//     0x43,  // SYNC0         Sync Word, Low Byte
//     0x61, //0x3D,  // PKTLEN        Packet Length
//     0x0E,  // PKTCTRL1      Packet Automation Control
//     0x05,  // PKTCTRL0      Packet Automation Control
//     0x01,  // ADDR          Device Address
//     0x00,  // CHANNR        Channel Number
//     0x08,  // FSCTRL1       Frequency Synthesizer Control
//     0x00,  // FSCTRL0       Frequency Synthesizer Control
//     0x10,  // FREQ2         Frequency Control Word, High Byte
//     0xA7,  // FREQ1         Frequency Control Word, Middle Byte
//     0x62,  // FREQ0         Frequency Control Word, Low Byte
//     0x5B,  // MDMCFG4       Modem Configuration
//     0xF8,  // MDMCFG3       Modem Configuration
//     0x03,  // MDMCFG2       Modem Configuration
//     0x22,  // MDMCFG1       Modem Configuration
//     0xF8,  // MDMCFG0       Modem Configuration
//     0x47,  // DEVIATN       Modem Deviation Setting
//     0x07,  // MCSM2         Main Radio Control State Machine Configuration
//     0x0C, //0x1C, //diubah buat CCA, depannya 2, liat hal 81//0x0C,  // MCSM1         Main Radio Control State Machine Configuration
//     0x18,  // MCSM0         Main Radio Control State Machine Configuration
//     0x1D,  // FOCCFG        Frequency Offset Compensation Configuration
//     0x1C,  // BSCFG         Bit Synchronization Configuration
//     0xC7,  // AGCCTRL2      AGC Control
//     0x00,  // AGCCTRL1      AGC Control
//     0xB2,  // AGCCTRL0      AGC Control
//     0x02,  // WOREVT1       High Byte Event0 Timeout
//     0x26,  // WOREVT0       Low Byte Event0 Timeout
//     0x09,  // WORCTRL       Wake On Radio Control
//     0xB6,  // FREND1        Front End RX Configuration
//     0x10,  // FREND0        Front End TX Configuration
//     0xEA,  // FSCAL3        Frequency Synthesizer Calibration
//     0x2A,  // FSCAL2        Frequency Synthesizer Calibration
//     0x00,  // FSCAL1        Frequency Synthesizer Calibration
//     0x11,  // FSCAL0        Frequency Synthesizer Calibration
//     0x41,  // RCCTRL1       RC Oscillator Configuration
//     0x00,  // RCCTRL0       RC Oscillator Configuration
//     0x59,  // FSTEST        Frequency Synthesizer Calibration Control,
//     0x7F,  // PTEST         Production Test
//     0x3F,  // AGCTEST       AGC Test
//     0x81,  // TEST2         Various Test Settings
//     0x35,  // TEST1         Various Test Settings
//     0x09   // TEST0         Various Test Settings
// };

////////////////////////////////////////////////
#include <Arduino.h>
#include <cc1101.h>
#include <AmbroSimpleTCP.h>

CC1101 cc1101;
bool signalFlag = false;
uint8_t data[1] = {0};
uint8_t i = 0;

void ISRSignalFlag() {
  signalFlag  = true;
}

struct CCPacket packet;

void setup() {
  Serial.begin(9600);
  delay(500);
  cc1101.init();
  cc1101.setCCregs();
  uint8_t addr[3] = {2, 1, 0};
  cc1101.setDeviceAddress(addr);
  Serial.print("CC1101_PARTNUM "); //cc1101=0
  Serial.println(cc1101.readReg(CC1101_PARTNUM, CC1101_STATUS_REGISTER));
  Serial.print("CC1101_VERSION "); //cc1101=4
  Serial.println(cc1101.readReg(CC1101_VERSION, CC1101_STATUS_REGISTER));
  Serial.print("CC1101_MARCSTATE ");
  Serial.println(cc1101.readReg(CC1101_MARCSTATE, CC1101_STATUS_REGISTER) & 0x1f);

  attachInterrupt(digitalPinToInterrupt(2), ISRSignalFlag, FALLING);

  char s[16];
  for (int i = 0; i <= 46; i++) {
    sprintf(s, "0x%02X ", cc1101.readReg(i, CC1101_CONFIG_REGISTER));
    Serial.print(s);
    if ((i + 1) % 10 == 0 && i != 0)
      Serial.println();
    delay(10);
  }
  Serial.println();
}

void loop() {
  //char data[2] = {8, 9};
  //packet.destinationAddress = BROADCAST_ADDRESS;
  //packet.destinationAddress = 0x03;
  Serial.println("Sending...");
  Serial.print("destination: ");
  for (uint8_t i = 0; i < 3; i++) {
    //packet.destinationAddress[i] = i;
    packet.destinationAddress[i] = 0;
    Serial.print(packet.destinationAddress[i]);
  }

  Serial.println();
  packet.payload[0] = i++;
  //packet.payloadLength = sizeof(packet.payload) / sizeof(packet.payload[0]);
  packet.payloadLength = 1;
  packet.type = DATA;
  Serial.print("from: ");
  uint8_t addr[3] = {2, 1, 0};
  for (uint8_t i = 0; i < 3; i++) {
    packet.sourceAddress[i] = addr[i];
    Serial.print(packet.sourceAddress[i]);
  }
  Serial.println();
  //packet.sourceAddress = cc1101.readReg(CC1101_ADDR, CC1101_CONFIG_REGISTER);
  //cc1101.sendData(0, data, 1);
  if (cc1101.sendData(&packet)) {
    Serial.println("Data sent successfully");
  }
  delay(1500);
}
